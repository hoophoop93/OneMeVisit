import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierNotificationOptions } from '../models/notifier-notification.model';
import { NotifierQueueService } from './notifier-queue.service';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierService {
    /**
     * Notifier queue service
     */
    private readonly queueService;
    /**
     * Notifier configuration
     */
    private readonly config;
    /**
     * Constructor
     *
     * @param notifierQueueService Notifier queue service
     * @param config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService: NotifierQueueService, config: NotifierConfig);
    /**
     * Get the notifier configuration
     *
     * @returns Notifier configuration
     */
    getConfig(): NotifierConfig;
    /**
     * API: Show a new notification
     *
     * @param notificationOptions Notification options
     */
    show(notificationOptions: NotifierNotificationOptions): void;
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param notificationId ID of the notification to hide
     */
    hide(notificationId: string): void;
    /**
     * API: Hide the newest notification
     */
    hideNewest(): void;
    /**
     * API: Hide the oldest notification
     */
    hideOldest(): void;
    /**
     * API: Hide all notifications at once
     */
    hideAll(): void;
    /**
     * API: Shortcut for showing a new notification
     *
     * @param type             Type of the notification
     * @param message          Message of the notification
     * @param [notificationId] Unique ID for the notification (optional)
     */
    notify(type: string, message: string, notificationId?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotifierService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWZpZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJRdWV1ZVNlcnZpY2UgfSBmcm9tICcuL25vdGlmaWVyLXF1ZXVlLnNlcnZpY2UnO1xuLyoqXG4gKiBOb3RpZmllciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgcHVibGljIG5vdGlmaWVyIEFQSS4gT25jZSBpbmplY3RlZCBpbnRvIGEgY29tcG9uZW50LCBkaXJlY3RpdmUsIHBpcGUsIHNlcnZpY2UsIG9yIGFueSBvdGhlciBidWlsZGluZ1xuICogYmxvY2sgb2YgYW4gYXBwbGljYXRpb25zLCBpdCBjYW4gYmUgdXNlZCB0byBzaG93IG5ldyBub3RpZmljYXRpb25zLCBhbmQgaGlkZSBleGlzdGluZyBvbmVzLiBJbnRlcm5hbGx5LCBpdCB0cmFuc2Zvcm1zIEFQSSBjYWxscyBpbnRvXG4gKiBhY3Rpb25zLCB3aGljaCB0aGVuIGdldCB0aHJvd24gaW50byB0aGUgYWN0aW9uIHF1ZXVlIC0gZXZlbnR1YWxseSBiZWluZyBwcm9jZXNzZWQgYXQgdGhlIHJpZ2h0IG1vbWVudC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTm90aWZpZXJTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBxdWV1ZVNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm90aWZpZXJRdWV1ZVNlcnZpY2UgTm90aWZpZXIgcXVldWUgc2VydmljZVxuICAgICAqIEBwYXJhbSBjb25maWcgICAgICAgICAgICAgICBOb3RpZmllciBjb25maWd1cmF0aW9uLCBvcHRpb25hbGx5IGluamVjdGVkIGFzIGEgZGVwZW5kZW5jeVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5vdGlmaWVyUXVldWVTZXJ2aWNlOiBOb3RpZmllclF1ZXVlU2VydmljZSwgY29uZmlnOiBOb3RpZmllckNvbmZpZyk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBub3RpZmllciBjb25maWd1cmF0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgZ2V0Q29uZmlnKCk6IE5vdGlmaWVyQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIEFQSTogU2hvdyBhIG5ldyBub3RpZmljYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25PcHRpb25zIE5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAgICovXG4gICAgc2hvdyhub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFQSTogSGlkZSBhIHNwZWNpZmljIG5vdGlmaWNhdGlvbiwgZ2l2ZW4gaXRzIElEXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uSWQgSUQgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBoaWRlXG4gICAgICovXG4gICAgaGlkZShub3RpZmljYXRpb25JZDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBUEk6IEhpZGUgdGhlIG5ld2VzdCBub3RpZmljYXRpb25cbiAgICAgKi9cbiAgICBoaWRlTmV3ZXN0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQVBJOiBIaWRlIHRoZSBvbGRlc3Qgbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgaGlkZU9sZGVzdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFQSTogSGlkZSBhbGwgbm90aWZpY2F0aW9ucyBhdCBvbmNlXG4gICAgICovXG4gICAgaGlkZUFsbCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFQSTogU2hvcnRjdXQgZm9yIHNob3dpbmcgYSBuZXcgbm90aWZpY2F0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICAgICBUeXBlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAgICAgICAgICBNZXNzYWdlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICAgKiBAcGFyYW0gW25vdGlmaWNhdGlvbklkXSBVbmlxdWUgSUQgZm9yIHRoZSBub3RpZmljYXRpb24gKG9wdGlvbmFsKVxuICAgICAqL1xuICAgIG5vdGlmeSh0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbm90aWZpY2F0aW9uSWQ/OiBzdHJpbmcpOiB2b2lkO1xufVxuIl19