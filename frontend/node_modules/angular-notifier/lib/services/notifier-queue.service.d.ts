import { Subject } from 'rxjs';
import { NotifierAction } from '../models/notifier-action.model';
/**
 * Notifier queue service
 *
 * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls
 * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -
 * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and
 * processes them at the right time (which is when the previous action has been processed successfully).
 *
 * Technical sidenote:
 * An action looks pretty similar to the ones within the Flux / Redux pattern.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierQueueService {
    /**
     * Stream of actions, subscribable from outside
     */
    readonly actionStream: Subject<NotifierAction>;
    /**
     * Queue of actions
     */
    private actionQueue;
    /**
     * Flag, true if some action is currently in progress
     */
    private isActionInProgress;
    /**
     * Constructor
     */
    constructor();
    /**
     * Push a new action to the queue, and try to run it
     *
     * @param action Action object
     */
    push(action: NotifierAction): void;
    /**
     * Continue with the next action (called when the current action is finished)
     */
    continue(): void;
    /**
     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left
     */
    private tryToRunNextAction;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierQueueService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotifierQueueService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItcXVldWUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci1xdWV1ZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5vdGlmaWVyQWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWFjdGlvbi5tb2RlbCc7XG4vKipcbiAqIE5vdGlmaWVyIHF1ZXVlIHNlcnZpY2VcbiAqXG4gKiBJbiBnZW5lcmFsLCBBUEkgY2FsbHMgZG9uJ3QgZ2V0IHByb2Nlc3NlZCByaWdodCBhd2F5LiBJbnN0ZWFkLCB3ZSBoYXZlIHRvIHF1ZXVlIHRoZW0gdXAgaW4gb3JkZXIgdG8gcHJldmVudCBzaW11bHRhbmlvdXMgQVBJIGNhbGxzXG4gKiBpbnRlcmZlcmluZyB3aXRoIGVhY2ggb3RoZXIuIFRoaXMsIGF0IGxlYXN0IGluIHRoZW9yeSwgaXMgcG9zc2libGUgYXQgYW55IHRpbWUuIEluIHBhcnRpY3VsYXIsIGFuaW1hdGlvbnMgLSB3aGljaCBwb3RlbnRpYWxseSBvdmVybGFwIC1cbiAqIGNhbiBjYXVzZSBjaGFuZ2VzIGluIEpTIGNsYXNzZXMgYXMgd2VsbCBhcyBhZmZlY3QgdGhlIERPTS4gVGhlcmVmb3JlLCB0aGUgcXVldWUgc2VydmljZSB0YWtlcyBhbGwgYWN0aW9ucywgcHV0cyB0aGVtIGluIGEgcXVldWUsIGFuZFxuICogcHJvY2Vzc2VzIHRoZW0gYXQgdGhlIHJpZ2h0IHRpbWUgKHdoaWNoIGlzIHdoZW4gdGhlIHByZXZpb3VzIGFjdGlvbiBoYXMgYmVlbiBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5KS5cbiAqXG4gKiBUZWNobmljYWwgc2lkZW5vdGU6XG4gKiBBbiBhY3Rpb24gbG9va3MgcHJldHR5IHNpbWlsYXIgdG8gdGhlIG9uZXMgd2l0aGluIHRoZSBGbHV4IC8gUmVkdXggcGF0dGVybi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTm90aWZpZXJRdWV1ZVNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIFN0cmVhbSBvZiBhY3Rpb25zLCBzdWJzY3JpYmFibGUgZnJvbSBvdXRzaWRlXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWN0aW9uU3RyZWFtOiBTdWJqZWN0PE5vdGlmaWVyQWN0aW9uPjtcbiAgICAvKipcbiAgICAgKiBRdWV1ZSBvZiBhY3Rpb25zXG4gICAgICovXG4gICAgcHJpdmF0ZSBhY3Rpb25RdWV1ZTtcbiAgICAvKipcbiAgICAgKiBGbGFnLCB0cnVlIGlmIHNvbWUgYWN0aW9uIGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzc1xuICAgICAqL1xuICAgIHByaXZhdGUgaXNBY3Rpb25JblByb2dyZXNzO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKTtcbiAgICAvKipcbiAgICAgKiBQdXNoIGEgbmV3IGFjdGlvbiB0byB0aGUgcXVldWUsIGFuZCB0cnkgdG8gcnVuIGl0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWN0aW9uIEFjdGlvbiBvYmplY3RcbiAgICAgKi9cbiAgICBwdXNoKGFjdGlvbjogTm90aWZpZXJBY3Rpb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnRpbnVlIHdpdGggdGhlIG5leHQgYWN0aW9uIChjYWxsZWQgd2hlbiB0aGUgY3VycmVudCBhY3Rpb24gaXMgZmluaXNoZWQpXG4gICAgICovXG4gICAgY29udGludWUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUcnkgdG8gcnVuIHRoZSBuZXh0IGFjdGlvbiBpbiB0aGUgcXVldWU7IHdlIHNraXAgaWYgdGhlcmUgYWxyZWFkeSBpcyBzb21lIGFjdGlvbiBpbiBwcm9ncmVzcywgb3IgaWYgdGhlcmUgaXMgbm8gYWN0aW9uIGxlZnRcbiAgICAgKi9cbiAgICBwcml2YXRlIHRyeVRvUnVuTmV4dEFjdGlvbjtcbn1cbiJdfQ==